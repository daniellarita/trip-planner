'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var bunyan = _interopDefault(require('bunyan'));
var pick = _interopDefault(require('lodash/pick'));
var isFunction = _interopDefault(require('lodash/isFunction'));
var LE = _interopDefault(require('le_js'));
var omit = _interopDefault(require('lodash/omit'));
var get = _interopDefault(require('lodash/get'));

/**
 * Config keys that should always be passed to
 * `bunyan.createLogger`
 * @type {Array}
 */
var BUNYAN_CONFIG_FIELDS = ['name', 'level', 'streams', 'serializers'];
/**
 * Whitelist of extra config keys that should be
 * passed to `bunyan.createLogger` to form
 * root logger fields.
 * @type {Array}
 */
var DEFAULT_ROOT_FIELDS = ['environment', 'release'];
/** @type {Object} default config to Logger classes */
var DEFAULT_CONFIG = Object.freeze({
  name: 'WeWork',
  environment: null,
  codeVersion: null,
  level: 'info',
  stdout: true,
  streams: null,
  serializers: bunyan.stdSerializers,
  logentriesToken: null,
  rollbarToken: null,
  rootFields: DEFAULT_ROOT_FIELDS
});
/**
 * Merges config with DEFAULT_CONFIG, and appends passed in streams
 * with pre-configured streams for the runtime.
 *
 * This is used to configure this library, not bunyan as it has a lot of
 * extra information. See `toBunyanConfig` below.
 *
 * @param  {Object} config
 * @param  {Function} getStreamsForRuntime - returns appended config.streams
 * @returns {Object} runtimeConfig
 */
function assembleConfig(config, getStreamsForRuntime) {
  var baseConfig = Object.assign({}, DEFAULT_CONFIG, config);
  return Object.assign(baseConfig, {
    streams: getStreamsForRuntime(baseConfig)
  });
}
/**
 * Create a config objct for bunyan from a full `we-js-logger` config object.
 * Extra keys passed to `bunyan.createLogger` become root logger fields, pass
 * a custom `config.rootFields` to control this behavior
 *
 * @param  {Object} config
 * @param  {String[]} config.rootFields - extra fields to pass to bunyan
 * @return {Object} config for bunyan.createLogger
 */
function toBunyanConfig(config) {
  return pick(config, BUNYAN_CONFIG_FIELDS.concat(config.rootFields));
}

function ClientConsoleLogger() {}
/**
 * Transport to `console`
 * @param  {Object} data
 * @returns {undefined}
 */
ClientConsoleLogger.prototype.write = function () {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var loggerName = data.component ? data.name + '/' + data.component : data.name;
  var levelCss = void 0;
  var defaultCss = 'color: DimGray';
  var msgCss = 'color: SteelBlue';
  if (data.level < bunyan.DEBUG) {
    levelCss = 'color: DeepPink';
  } else if (data.level < bunyan.INFO) {
    levelCss = 'color: GoldenRod';
  } else if (data.level < bunyan.WARN) {
    levelCss = 'color: DarkTurquoise';
  } else if (data.level < bunyan.ERROR) {
    levelCss = 'color: Purple';
  } else if (data.level < bunyan.FATAL) {
    levelCss = 'color: Crimson';
  } else {
    levelCss = 'color: Black';
  }
  console.log(
  '[%s] %c%s%c: %s: %c%s', data.time, levelCss, bunyan.nameFromLevel[data.level], defaultCss, loggerName, msgCss, data.msg);
  if (data.err && data.err.stack) {
    console.error(data.err.stack);
  }
};

/**
* Custom bunyan stream that transports to Logentries from client applications
* @param {String} options.token
* @param {String} options.level
*/
function ClientLogentriesLogger(_ref) {
  var token = _ref.token;
  LE.init({
    token: token,
    no_format: true,
    page_info: 'per-page'
  });
}
/**
* Transport logs to Logentries
* @param  {Object} data
* @returns {undefined}
*/
ClientLogentriesLogger.prototype.write = function () {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var level = bunyan.nameFromLevel[data.level];
  if (isFunction(LE[level])) {
    LE[level](data);
  } else {
    LE.log(data);
  }
};

/**
 * Map of bunyan log levels to Rollbar levels
 * https://github.com/trentm/node-bunyan#levels
 * https://rollbar.com/docs/notifier/rollbar.js/api/#rollbardebuginfowarnwarningerrorcritical
 * @type {Object}
 */
var bunyanToRollbarLevelMap = {
  fatal: 'critical',
  error: 'error',
  warn: 'warning',
  info: 'info',
  debug: 'debug',
  trace: 'debug'
};
/**
 * Convert bunyan log level to rollbar level. Defaults to 'error'.
 * @param   {String} level - bunyan log level
 * @returns {String} Rollbar log level
 */
var bunyanLevelToRollbarLevelName = function bunyanLevelToRollbarLevelName() {
  var level = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : bunyan.ERROR;
  var bunyanLevelName = bunyan.nameFromLevel[level];
  return bunyanToRollbarLevelMap[bunyanLevelName] || 'error';
};

var isGlobalRollbarConfigured = function isGlobalRollbarConfigured() {
  return !!get(global, 'Rollbar');
};
/**
 * Custom rollbar stream that transports to logentries from a browser
 * Wortks with a global Rollbar instance that is already initialized.
 * Note this expects rollbar to be loaded in the head, not via an npm module.
 * See https://rollbar.com/docs/notifier/rollbar.js/#quick-start for details on
 * integrating Rollbar in client apps
 *
 * @param {String} options.token
 * @param {String} options.environment
 * @param {String} options.codeVersion
 */
function ClientRollbarLogger(_ref) {
  var token = _ref.token;
  var environment = _ref.environment;
  var codeVersion = _ref.codeVersion;
  global.Rollbar.configure({
    accessToken: token,
    environment: environment,
    captureUncaught: true,
    captureUnhandledRejections: true,
    payload: {
      environment: environment,
      javascript: {
        code_version: codeVersion,
        source_map_enabled: true
      }
    }
  });
}
/**
 * Transport logs to Rollbar
 * @param  {Object} data
 * @returns {undefined}
 */
ClientRollbarLogger.prototype.write = function () {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var rollbarLevelName = bunyanLevelToRollbarLevelName(data.level);
  var scopeData = omit(data, ['req', 'level']);
  global.Rollbar.scope(scopeData)[rollbarLevelName](data.msg, data.err);
};

var asyncGenerator = function () {
  function AwaitValue(value) {
    this.value = value;
  }

  function AsyncGenerator(gen) {
    var front, back;

    function send(key, arg) {
      return new Promise(function (resolve, reject) {
        var request = {
          key: key,
          arg: arg,
          resolve: resolve,
          reject: reject,
          next: null
        };

        if (back) {
          back = back.next = request;
        } else {
          front = back = request;
          resume(key, arg);
        }
      });
    }

    function resume(key, arg) {
      try {
        var result = gen[key](arg);
        var value = result.value;

        if (value instanceof AwaitValue) {
          Promise.resolve(value.value).then(function (arg) {
            resume("next", arg);
          }, function (arg) {
            resume("throw", arg);
          });
        } else {
          settle(result.done ? "return" : "normal", result.value);
        }
      } catch (err) {
        settle("throw", err);
      }
    }

    function settle(type, value) {
      switch (type) {
        case "return":
          front.resolve({
            value: value,
            done: true
          });
          break;

        case "throw":
          front.reject(value);
          break;

        default:
          front.resolve({
            value: value,
            done: false
          });
          break;
      }

      front = front.next;

      if (front) {
        resume(front.key, front.arg);
      } else {
        back = null;
      }
    }

    this._invoke = send;

    if (typeof gen.return !== "function") {
      this.return = undefined;
    }
  }

  if (typeof Symbol === "function" && Symbol.asyncIterator) {
    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
      return this;
    };
  }

  AsyncGenerator.prototype.next = function (arg) {
    return this._invoke("next", arg);
  };

  AsyncGenerator.prototype.throw = function (arg) {
    return this._invoke("throw", arg);
  };

  AsyncGenerator.prototype.return = function (arg) {
    return this._invoke("return", arg);
  };

  return {
    wrap: function (fn) {
      return function () {
        return new AsyncGenerator(fn.apply(this, arguments));
      };
    },
    await: function (value) {
      return new AwaitValue(value);
    }
  };
}();















var get$1 = function get$1(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent === null) {
      return undefined;
    } else {
      return get$1(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return getter.call(receiver);
  }
};

















var set = function set(object, property, value, receiver) {
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent !== null) {
      set(parent, property, value, receiver);
    }
  } else if ("value" in desc && desc.writable) {
    desc.value = value;
  } else {
    var setter = desc.set;

    if (setter !== undefined) {
      setter.call(receiver, value);
    }
  }

  return value;
};















var toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  } else {
    return Array.from(arr);
  }
};

/**
 * A logger than can be used in browsers
 * @param   {Object} config
 * @returns {Object} - a preconfigured `bunyan` logger instance
 */
function ClientLogger() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var clientConfig = assembleConfig(config, getStreams);
  return bunyan.createLogger(toBunyanConfig(clientConfig));
}
/**
 * Add standard Client logger streams to `config.streams`
 * @private
 * @param  {Object} config
 * @param  {Array?} config.streams
 * @returns {Array}
 */
function getStreams(config) {
  var streams = Array.isArray(config.streams) ? [].concat(toConsumableArray(config.streams)) : [];
  if (config.stdout) {
    streams.push({
      name: 'stdout',
      level: config.level,
      stream: new ClientConsoleLogger(),
      type: 'raw'
    });
  }
  if (isGlobalRollbarConfigured()) {
    if (config.rollbarToken) {
      streams.push({
        name: 'rollbar',
        level: 'warn',
        stream: new ClientRollbarLogger({
          token: config.rollbarToken,
          environment: config.environment,
          codeVersion: config.codeVersion
        }),
        type: 'raw'
      });
    }
  } else {
    console.warn('Client rollbar is not correctly configured');
  }
  if (config.logentriesToken) {
    streams.push({
      name: 'logentries',
      level: config.level,
      stream: new ClientLogentriesLogger({ token: config.logentriesToken }),
      type: 'raw'
    });
  }
  return streams;
}

module.exports = ClientLogger;
//# sourceMappingURL=client.js.map
