'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var bunyan = _interopDefault(require('bunyan'));
var pick = _interopDefault(require('lodash/pick'));
var Rollbar = _interopDefault(require('rollbar'));
var bunyanFormat = _interopDefault(require('bunyan-format'));
var omit = _interopDefault(require('lodash/omit'));
var isError = _interopDefault(require('lodash/isError'));
var Logentries = _interopDefault(require('le_node'));

/**
 * Config keys that should always be passed to
 * `bunyan.createLogger`
 * @type {Array}
 */
const BUNYAN_CONFIG_FIELDS = [
  'name',
  'level',
  'streams',
  'serializers',
];
/**
 * Whitelist of extra config keys that should be
 * passed to `bunyan.createLogger` to form
 * root logger fields.
 * @type {Array}
 */
const DEFAULT_ROOT_FIELDS = [
  'environment',
  'release',
];
/** @type {Object} default config to Logger classes */
const DEFAULT_CONFIG = Object.freeze({
  name: 'WeWork',
  environment: null,
  codeVersion: null,
  level: 'info',
  stdout: true,
  streams: null,
  serializers: bunyan.stdSerializers,
  logentriesToken: null,
  rollbarToken: null,
  rootFields: DEFAULT_ROOT_FIELDS
});
/**
 * Merges config with DEFAULT_CONFIG, and appends passed in streams
 * with pre-configured streams for the runtime.
 *
 * This is used to configure this library, not bunyan as it has a lot of
 * extra information. See `toBunyanConfig` below.
 *
 * @param  {Object} config
 * @param  {Function} getStreamsForRuntime - returns appended config.streams
 * @returns {Object} runtimeConfig
 */
function assembleConfig(config, getStreamsForRuntime) {
  const baseConfig = Object.assign({}, DEFAULT_CONFIG, config);
  return Object.assign(baseConfig, {
    streams: getStreamsForRuntime(baseConfig)
  });
}
/**
 * Create a config objct for bunyan from a full `we-js-logger` config object.
 * Extra keys passed to `bunyan.createLogger` become root logger fields, pass
 * a custom `config.rootFields` to control this behavior
 *
 * @param  {Object} config
 * @param  {String[]} config.rootFields - extra fields to pass to bunyan
 * @return {Object} config for bunyan.createLogger
 */
function toBunyanConfig(config) {
  return pick(config, BUNYAN_CONFIG_FIELDS.concat(config.rootFields));
}

/**
 * Map of bunyan log levels to Rollbar levels
 * https://github.com/trentm/node-bunyan#levels
 * https://rollbar.com/docs/notifier/rollbar.js/api/#rollbardebuginfowarnwarningerrorcritical
 * @type {Object}
 */
const bunyanToRollbarLevelMap = {
  fatal: 'critical',
  error: 'error',
  warn: 'warning',
  info: 'info',
  debug: 'debug',
  trace: 'debug'
};
/**
 * Convert bunyan log level to rollbar level. Defaults to 'error'.
 * @param   {String} level - bunyan log level
 * @returns {String} Rollbar log level
 */
const bunyanLevelToRollbarLevelName = (level = bunyan.ERROR) => {
  const bunyanLevelName = bunyan.nameFromLevel[level];
  return bunyanToRollbarLevelMap[bunyanLevelName] || 'error';
};

function ServerRollbarLogger({ token, codeVersion, environment }) {
  Rollbar.init(token, {
    handleUncaughtExceptionsAndRejections: true,
    codeVersion,
    environment
  });
}
/**
 * Transport to Rollbar
 * @description handles `err` and `req` properties, attaches any custom data,
 * and calls the appropriate Rollbar method.
 *
 * @param  {Object} data
 * @returns {undefined}
 */
ServerRollbarLogger.prototype.write = function (data = {}) {
  const rollbarLevelName = bunyanLevelToRollbarLevelName(data.level);
  const scopeData = omit(data, ['req', 'level']);
  const payload = Object.assign({ level: rollbarLevelName }, scopeData);
  if (data.err && isError(data.err)) {
    Rollbar.handleErrorWithPayloadData(data.err, payload, data.req);
  } else {
    Rollbar.reportMessageWithPayloadData(data.msg, payload, data.req);
  }
};

/**
 * Custom bunyan stream that transports to logentries from a node process
 * @param {Object} options
 * @param {String} options.token
 * @param {String} options.level
 * @returns {Object} - bunyan stream config
 */
function ServerLogentriesLogger({ token, level }) {
  const loggerDefinition = Logentries.bunyanStream({
    token,
    secure: true,
    withStack: true
  });
  loggerDefinition.level = level;
  return loggerDefinition;
}

const uuid = require('uuid');
const DEFAULT_HEADER_NAME = 'x-request-id';
/**
 * Create a request loging express middleware
 * @param  {Object}  logger - a logger instance
 * @param  {Object}  options
 * @param  {String?} options.reqIdHeader
 * @returns {Function}
 */
function createRequestLogger(logger, { reqIdHeader = DEFAULT_HEADER_NAME } = {}) {
  /**
   * Request Logger Middleware
   * Adds base logging to every request
   * Attaches a `log` child to each request object
   *
   * @param  {Object}   req
   * @param  {Object}   res
   * @param  {Function} next
   * @returns {undefined}
   */
  return function requestLoggerMiddleware(req, res, next) {
    const id = req.get(reqIdHeader) || uuid.v4();
    let log = logger.child({ component: 'request', req_id: id, req });
    req.log = log;
    res.setHeader(reqIdHeader, id);
    log.info('start request');
    const time = process.hrtime();
    res.on('finish', () => {
      const diff = process.hrtime(time);
      const duration = diff[0] * 1e3 + diff[1] * 1e-6;
      log.info({ res, duration }, 'end request');
      req.log = null;
      log = null;
    });
    next();
  };
}

/**
 * A logger than can be used in node processes
 * @param   {Object} config
 * @returns {Object} - a preconfigured `bunyan` logger instance
 */
function NodeLogger(config = {}) {
  const serverConfig = assembleConfig(config, getStreams);
  const logger = bunyan.createLogger(toBunyanConfig(serverConfig));
  logger.requestLogger = createRequestLogger(logger, serverConfig);
  logger.rollbarErrorMiddleware = Rollbar.errorHandler(serverConfig.rollbarToken);
  return logger;
}
/**
 * Add standard Node logger streams to `config.streams`
 * @private
 * @param  {Object} config
 * @param  {Array?} config.streams
 * @returns {Array}
 */
function getStreams(config) {
  const streams = Array.isArray(config.streams)
    ? [...config.streams]
    : [];
  if (config.stdout) {
    streams.push({
      name: 'stdout',
      level: config.level,
      stream: bunyanFormat({ outputMode: 'short' }),
      type: 'stream'
    });
  }
  if (config.rollbarToken) {
    streams.push({
      name: 'rollbar',
      level: 'warn',
      stream: new ServerRollbarLogger({
        token: config.rollbarToken,
        environment: config.environment,
        codeVersion: config.codeVersion
      }),
      type: 'raw'
    });
  }
  if (config.logentriesToken) {
    streams.push(new ServerLogentriesLogger({
      token: config.logentriesToken,
      level: config.level
    }));
  }
  return streams;
}

module.exports = NodeLogger;
//# sourceMappingURL=node.js.map
